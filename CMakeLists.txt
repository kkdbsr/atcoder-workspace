cmake_minimum_required(VERSION 3.15)
project(atcoder_workspace CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "-Wall -std=c++17 -fsanitize=undefined -Wno-deprecated -Wno-unused-variable -Wno-sign-conversion -DCOTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES=1")
# set(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic -Wno-unused-variable -Wcast-align -Wcast-qual -Wconversion -Wdisabled-optimization -Wendif-labels -Wfloat-equal -Winit-self -Winline -Wlogical-op -Wmissing-include-dirs -Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual -Wpacked -Wpointer-arith -Wredundant-decls -Wshadow -Wsign-promo -Wswitch-default -Wswitch-enum -Wunsafe-loop-optimizations -Wvariadic-macros -Wwrite-strings")
set(CMAKE_CXX_FLAGS_RELEASE "-O2 -s -DNDEBUG -march=native")
set(CMAKE_CXX_FLAGS_DEBUG "-g3 -O0")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g3 -Og")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -s -DNDEBUG -march=native")

set(BOOST_INCLUDE_PATH /usr/local/opt/boost/include)
set(BOOST_LIBRARY_PATH /usr/local/opt/boost/lib)
set(BOOST_LIBS "-lboost_filesystem -lboost_system")
include_directories(${PROJECT_SOURCE_DIR}/ac-library)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake)
include(cotire)
set_directory_properties(PROPERTIES COTIRE_PREFIX_HEADER_INCLUDE_PATH ${PROJECT_SOURCE_DIR}/ac-library)
set_target_properties(PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT "bits/stdc++.h")

# use ccache
option(CCACHE_ENABLE "If the command ccache is avilable, use it for compile." ON)
find_program(CCACHE_EXE ccache)
if(CCACHE_EXE)
  if(CCACHE_ENABLE)
    message(STATUS "Enable ccache")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
  endif()
endif()

MACRO(CREATE_BINARY target_dir)
    FILE(GLOB_RECURSE paths RELATIVE ${target_dir} ${target_dir}/*/*.cpp)
    FOREACH(path ${paths})
        SET(binary_name "")
        STRING(REGEX MATCH [^\/]+\/[^\/]+\/[^\/]+\.cpp$ binary_name ${path})
        STRING(REGEX REPLACE "\/" "_" binary_name ${binary_name})
        STRING(REGEX REPLACE "\.cpp" "" binary_name ${binary_name})
        get_filename_component(src_dir ${path} DIRECTORY)
        ADD_EXECUTABLE(${binary_name} ${path})
        cotire(${binay_name})
        # copy binary to src dir for evaluating with `atcoder-tools test`
        add_custom_command(TARGET ${binary_name} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "$<TARGET_FILE_DIR:${binary_name}>/${binary_name}" "${PROJECT_SOURCE_DIR}/${src_dir}/a.out")
    ENDFOREACH()
ENDMACRO()

CREATE_BINARY(${CMAKE_CURRENT_SOURCE_DIR})
